{"version":3,"sources":["../../src/util/extractFiles.js"],"names":["extractDroppedFiles","dataTransfer","files","Array","from","items","length","Promise","resolve","normalizeItems","then","flatten","all","map","item","kind","webkitGetAsEntry","entry","err","getAsFile","isDirectory","walk","file","getAsString","str","File","type","isFile","dir","createReader","readEntries","entries","filter","entr","name","startsWith"],"mappings":"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","sourcesContent":["/**\r\n * Utilities for extracting files from dataTransfer in a predictable cross-browser fashion.\r\n * Also recursively extracts files from a directory\r\n * Inspired by https://github.com/component/normalized-upload\r\n */\r\n\r\nimport {flatten} from 'lodash'\r\n\r\nexport function extractDroppedFiles(dataTransfer) {\r\n  const files = Array.from(dataTransfer.files || [])\r\n  const items = Array.from(dataTransfer.items || [])\r\n  if (files && files.length > 0) {\r\n    return Promise.resolve(files)\r\n  }\r\n  return normalizeItems(items).then(flatten)\r\n}\r\n\r\nfunction normalizeItems(items) {\r\n  return Promise.all(\r\n    items.map((item) => {\r\n      // directory\r\n      if (item.kind === 'file' && item.webkitGetAsEntry) {\r\n        let entry\r\n        // Edge throws\r\n        try {\r\n          entry = item.webkitGetAsEntry()\r\n        } catch (err) {\r\n          return [item.getAsFile()]\r\n        }\r\n        if (!entry) {\r\n          return []\r\n        }\r\n        return entry.isDirectory ? walk(entry) : [item.getAsFile()]\r\n      }\r\n\r\n      // file\r\n      if (item.kind === 'file') {\r\n        const file = item.getAsFile()\r\n        return Promise.resolve(file ? [file] : [])\r\n      }\r\n\r\n      // others\r\n      return new Promise((resolve) => item.getAsString(resolve)).then((str) =>\r\n        str ? [new File([str], 'unknown.txt', {type: item.type})] : []\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\nfunction walk(entry) {\r\n  if (entry.isFile) {\r\n    return new Promise((resolve) => entry.file(resolve)).then((file) => [file])\r\n  }\r\n\r\n  if (entry.isDirectory) {\r\n    const dir = entry.createReader()\r\n    return new Promise((resolve) => dir.readEntries(resolve))\r\n      .then((entries) => entries.filter((entr) => !entr.name.startsWith('.')))\r\n      .then((entries) => Promise.all(entries.map(walk)).then(flatten))\r\n  }\r\n  return Promise.resolve([])\r\n}\r\n"],"file":"extractFiles.js"}